{"script":"-- key limit intervalMS nowMS [amount]\nlocal key        = KEYS[1]\nlocal limit      = tonumber(ARGV[1])\nlocal intervalMS = tonumber(ARGV[2])\nlocal nowMS      = tonumber(ARGV[3])\nlocal amount     = math.max(tonumber(ARGV[4]), 0)\nlocal force      = ARGV[5] == \"true\"\n\nlocal timestampKey = key .. \":T\"\n\nlocal prevTokens = redis.call('GET',key)\nlocal lastUpdateMS\n\nif prevTokens == false then\n   prevTokens = amount\n   lastUpdateMS = nowMS\nelse\n   lastUpdateMS = redis.call('GET',timestampKey)\n   if(lastUpdateMS == false) then lastUpdateMS = nowMS end\nend\n\n-- tokens that should have been added by now\nlocal addTokens = ((nowMS - lastUpdateMS) / intervalMS) * limit\n\n-- calculated token balance coming into this transaction\nlocal newTokens = math.min(prevTokens + addTokens, limit)\n\n-- token balance after trying this transaction\nlocal balanceTokens = newTokens - amount\n\n-- time to fill enough to retry this amount\nlocal retryDelta\n\n-- boolean verdict\nlocal rejected\n\n-- lets play our game\nif balanceTokens < 0 then -- we used more than we have\n   if force then -- ugh, /fine/\n      rejected = 0\n      balanceTokens = 0 -- drain the swamp\n   else\n      rejected = 1\n      balanceTokens = newTokens -- rejection doesn't eat tokens\n   end\n   retryDelta = math.ceil(((amount - balanceTokens) / limit) * intervalMS)\nelse -- polite transaction\n   rejected = 0\n   local nextBalance = balanceTokens - amount\n   if(nextBalance < 0) then -- will need to wait to repeat\n      retryDelta = math.ceil(((0 - nextBalance) / limit) * intervalMS)\n   else -- can repeat with current balance, no wait\n      retryDelta = 0\n   end\nend\n\n-- time to fill completely\nlocal fillDelta = math.ceil(((limit - balanceTokens) / limit) * intervalMS)\n\n-- rejected requests don't cost anything\n-- forced requests show up here as !rejected, but with balanceTokens = 0 (drained)\nif rejected == 0 then\n   redis.call('PSETEX',key,intervalMS,balanceTokens)\n   redis.call('PSETEX',timestampKey,intervalMS,nowMS)\nend\n\nreturn { balanceTokens, rejected, retryDelta, fillDelta }\n","sha1":"061f917d7b8c7abe694a1e8e287d7617265efbd6"}